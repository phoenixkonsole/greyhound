--- openssl-1.0.1j-clean/crypto/ui/ui_openssl.c	2014-10-15 14:53:39.000000000 +0200
+++ openssl-1.0.1j-amiga/crypto/ui/ui_openssl.c	2014-12-03 20:30:43.227001206 +0100
@@ -220,6 +220,14 @@
 #undef SGTTY
 #endif
 
+#if defined(OPENSSL_SYS_AMIGA)
+# undef TERMIOS
+# undef TERMIO
+# undef SGTTY
+# undef SIGACTION
+# define getch() Agetch()
+#endif
+
 #ifdef TERMIOS
 # include <termios.h>
 # define TTY_STRUCT		struct termios
@@ -296,7 +304,7 @@
 static long status;
 static unsigned short channel = 0;
 #else
-#if !defined(OPENSSL_SYS_MSDOS) || defined(__DJGPP__)
+#if (!defined(OPENSSL_SYS_MSDOS) && !defined(OPENSSL_SYS_AMIGA)) || defined(__DJGPP__)
 static TTY_STRUCT tty_orig,tty_new;
 #endif
 #endif
@@ -310,7 +318,7 @@
 static void pushsig(void);
 static void popsig(void);
 #endif
-#if defined(OPENSSL_SYS_MSDOS) && !defined(OPENSSL_SYS_WIN16)
+#if (defined(OPENSSL_SYS_MSDOS) || defined(OPENSSL_SYS_AMIGA)) && !defined(OPENSSL_SYS_WIN16)
 static int noecho_fgets(char *buf, int size, FILE *tty);
 #endif
 static int read_string_inner(UI *ui, UI_STRING *uis, int echo, int strip_nl);
@@ -434,7 +442,7 @@
 	ps=2;
 
 	result[0]='\0';
-#ifdef OPENSSL_SYS_MSDOS
+#if defined(OPENSSL_SYS_MSDOS) || defined(OPENSSL_SYS_AMIGA)
 	if (!echo)
 		{
 		noecho_fgets(result,maxsize,tty_in);
@@ -484,7 +492,7 @@
 	CRYPTO_w_lock(CRYPTO_LOCK_UI);
 	is_a_tty = 1;
 
-#if defined(OPENSSL_SYS_MACINTOSH_CLASSIC) || defined(OPENSSL_SYS_VXWORKS) || defined(OPENSSL_SYS_NETWARE) || defined(OPENSSL_SYS_BEOS)
+#if defined(OPENSSL_SYS_MACINTOSH_CLASSIC) || defined(OPENSSL_SYS_VXWORKS) || defined(OPENSSL_SYS_NETWARE) || defined(OPENSSL_SYS_BEOS) || defined(OPENSSL_SYS_AMIGA)
 	tty_in=stdin;
 	tty_out=stderr;
 #else
@@ -671,7 +679,7 @@
 #endif
 
 /* Internal functions specific for Windows */
-#if defined(OPENSSL_SYS_MSDOS) && !defined(OPENSSL_SYS_WIN16) && !defined(OPENSSL_SYS_WINCE)
+#if (defined(OPENSSL_SYS_MSDOS) ||  defined(OPENSSL_SYS_AMIGA)) && !defined(OPENSSL_SYS_WIN16) && !defined(OPENSSL_SYS_WINCE)
 static int noecho_fgets(char *buf, int size, FILE *tty)
 	{
 	int i;
@@ -716,3 +724,154 @@
 	return(strlen(buf));
 	}
 #endif
+
+/////////////////////////////////////////////////////////////////////////
+#ifdef OPENSSL_SYS_AMIGA
+/*
+Copyright (c) 1990-2006 Info-ZIP.  All rights reserved.
+
+For the purposes of this copyright and license, "Info-ZIP" is defined as
+the following set of individuals:
+
+   Mark Adler, John Bush, Karl Davis, Harald Denker, Jean-Michel Dubois,
+   Jean-loup Gailly, Hunter Goatley, Ed Gordon, Ian Gorman, Chris Herborth,
+   Dirk Haase, Greg Hartwig, Robert Heath, Jonathan Hudson, Paul Kienitz,
+   David Kirschbaum, Johnny Lee, Onno van der Linden, Igor Mandrichenko,
+   Steve P. Miller, Sergio Monesi, Keith Owens, George Petrov, Greg Roelofs,
+   Kai Uwe Rommel, Steve Salisbury, Dave Smith, Steven M. Schweda,
+   Christian Spieler, Cosmin Truta, Antoine Verheijen, Paul von Behren,
+   Rich Wales, Mike White
+
+This software is provided "as is," without warranty of any kind, express
+or implied.  In no event shall Info-ZIP or its contributors be held liable
+for any direct, indirect, incidental, special or consequential damages
+arising out of the use of or inability to use this software.
+
+Permission is granted to anyone to use this software for any purpose,
+including commercial applications, and to alter it and redistribute it
+freely, subject to the following restrictions:
+
+    1. Redistributions of source code must retain the above copyright notice,
+       definition, disclaimer, and this list of conditions.
+
+    2. Redistributions in binary form (compiled executables) must reproduce
+       the above copyright notice, definition, disclaimer, and this list of
+       conditions in documentation and/or other materials provided with the
+       distribution.  The sole exception to this condition is redistribution
+       of a standard UnZipSFX binary (including SFXWiz) as part of a
+       self-extracting archive; that is permitted without inclusion of this
+       license, as long as the normal SFX banner has not been removed from
+       the binary or disabled.
+
+    3. Altered versions--including, but not limited to, ports to new operating
+       systems, existing ports with new graphical interfaces, and dynamic,
+       shared, or static library versions--must be plainly marked as such
+       and must not be misrepresented as being the original source.  Such
+       altered versions also must not be misrepresented as being Info-ZIP
+       releases--including, but not limited to, labeling of the altered
+       versions with the names "Info-ZIP" (or any variation thereof, including,
+       but not limited to, different capitalizations), "Pocket UnZip," "WiZ"
+       or "MacZip" without the explicit permission of Info-ZIP.  Such altered
+       versions are further prohibited from misrepresentative use of the
+       Zip-Bugs or Info-ZIP e-mail addresses or of the Info-ZIP URL(s).
+
+    4. Info-ZIP retains the right to use the names "Info-ZIP," "Zip," "UnZip,"
+       "UnZipSFX," "WiZ," "Pocket UnZip," "Pocket Zip," and "MacZip" for its
+       own source and binary releases.
+*/
+
+/***
+ * License found at:
+ * https://joinup.ec.europa.eu/svn/lesoll/trunk/LEM/plugin-src/zip-2.32/LICENSE
+ *
+ * Source found at:
+ * https://joinup.ec.europa.eu/svn/lesoll/trunk/LEM/plugin-src/zip-2.32/amiga/filedate.c
+ * 
+ */
+
+/*  sendpkt.c
+ *  by A. Finkel, P. Lindsay, C. Sheppner
+ *  returns Res1 of the reply packet
+ */
+
+#include <exec/types.h>
+#include <exec/memory.h>
+#include <libraries/dos.h>
+#include <libraries/dosextens.h>
+#include <proto/exec.h>
+#include <proto/dos.h>
+
+LONG sendpkt(struct MsgPort *pid, LONG action, LONG *args, LONG nargs);
+
+LONG sendpkt(pid,action,args,nargs)
+struct MsgPort *pid;           /* process identifier (handler message port) */
+LONG action,                   /* packet type (desired action)              */
+     *args,                    /* a pointer to argument list                */
+     nargs;                    /* number of arguments in list               */
+{
+
+    struct MsgPort *replyport, *CreatePort(UBYTE *, long);
+    void DeletePort(struct MsgPort *);
+    struct StandardPacket *packet;
+    LONG count, *pargs, res1;
+
+    replyport = CreatePort(NULL,0L);
+    if( !replyport ) return(0);
+
+    packet = (struct StandardPacket *)AllocMem(
+            (long)sizeof(struct StandardPacket),MEMF_PUBLIC|MEMF_CLEAR);
+    if( !packet )
+    {
+        DeletePort(replyport);
+        return(0);
+    }
+
+    packet->sp_Msg.mn_Node.ln_Name  = (char *)&(packet->sp_Pkt);
+    packet->sp_Pkt.dp_Link          = &(packet->sp_Msg);
+    packet->sp_Pkt.dp_Port          = replyport;
+    packet->sp_Pkt.dp_Type          = action;
+
+    /* copy the args into the packet */
+    pargs = &(packet->sp_Pkt.dp_Arg1);      /* address of 1st argument */
+    for( count=0; count<nargs; count++ )
+        pargs[count] = args[count];
+
+    PutMsg(pid,(struct Message *)packet);   /* send packet */
+
+    WaitPort(replyport);
+    GetMsg(replyport);
+
+    res1 = packet->sp_Pkt.dp_Res1;
+
+    FreeMem((char *)packet,(long)sizeof(*packet));
+    DeletePort(replyport);
+
+    return(res1);
+
+} /* sendpkt() */
+
+
+/* Agetch() reads one raw keystroke -- uses sendpkt() */
+int Agetch(void)
+{
+    LONG sendpkt(struct MsgPort *pid, LONG action, LONG *args, LONG nargs);
+    struct Task *me = FindTask(NULL);
+    struct CommandLineInterface *cli = BADDR(((struct Process *) me)->pr_CLI);
+    BPTR fh = cli->cli_StandardInput;   /* this is immune to < redirection */
+    void *conp = ((struct FileHandle *) BADDR(fh))->fh_Type;
+    char longspace[8];
+    long *flag = (long *) ((ULONG) &longspace[4] & ~3); /* LONGWORD ALIGNED! */
+    UBYTE c;
+
+    *flag = 1;
+    sendpkt(conp, ACTION_SCREEN_MODE, flag, 1);         /* assume success */
+    Read(fh, &c, 1);
+    *flag = 0;
+    sendpkt(conp, ACTION_SCREEN_MODE, flag, 1);
+    if (c == 3)                                         /* ^C in input */
+        Signal(me, SIGBREAKF_CTRL_C);
+    return c;
+}
+
+#endif
+
